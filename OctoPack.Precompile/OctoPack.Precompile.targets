<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <RunOctoPackPrecompile Condition="'$(RunOctoPackPrecompile)'==''">true</RunOctoPackPrecompile>
    <OctoPackPrecompileIntermediateOutputPath Condition="'$(OctoPackPrecompileIntermediateOutputPath)'==''">$(IntermediateOutputPath)PrecompiledIntermediate\</OctoPackPrecompileIntermediateOutputPath>
    <OctoPackPrecompileOutputPath Condition="'$(OctoPackPrecompileOutputPath)'==''">$(IntermediateOutputPath)Precompiled\</OctoPackPrecompileOutputPath>
    <OctoPackPrecompileNuSpecFileName Condition="'$(OctoPackPrecompileNuSpecFileName)'==''">$(IntermediateOutputPath)$(OctoPackProjectName).nuspec</OctoPackPrecompileNuSpecFileName>
  </PropertyGroup>

  <Target Name="GenerateOctoPackPrecompileNuSpecFile" BeforeTargets="OctoPackPrecompile" Condition="$(RunOctoPackPrecompile) AND '$(OctoPackNuSpecFileName)' == '' AND !Exists('$(OctoPackProjectName).nuspec')">
    <PropertyGroup>
      <OctoPackNuSpecFileName>$(OctoPackPrecompileNuSpecFileName)</OctoPackNuSpecFileName>
      <PrecompileNuSpecFileContent>
        <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>$(OctoPackProjectName)</id>
    <authors>$(OctoPackProjectName)</authors>
    <description>$(OctoPackProjectName)</description>
    <version>1.0.0</version>
  </metadata>
  <files>
    <file src="$(OctoPackPrecompileOutputPath)**\*.*" target="" />
  </files>
</package>
]]>
      </PrecompileNuSpecFileContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(OctoPackNuSpecFileName)" Lines="$(PrecompileNuSpecFileContent)" Overwrite="true" />
  </Target>

  <Target Name="OctoPackPrecompile" BeforeTargets="OctoPack" Condition="$(RunOctoPack) AND $(RunOctoPackPrecompile)">
    <ItemGroup>
      <!-- This should collect the files the same way OctoPack does. https://github.com/OctopusDeploy/OctoPack -->
      <CollectedFiles Include="@(FileWrites)" Exclude="$(IntermediateOutputPath)**\*" />
      <CollectedFiles Include="@(FileWritesShareable)" Exclude="$(IntermediateOutputPath)**\*" />
      <CollectedFiles Include="@(Content)" />
      <CollectedFiles Include="@(TypeScriptCompile)" Condition="$(OctoPackIncludeTypeScriptSourceFiles)"/>

      <!--
        It looks like NuGet doesn't like the packages.config inside the packages, so we skip it.
        http://help.octopusdeploy.com/discussions/problems/29208-packagesconfig-files-are-excluded-from-packages-created-by-octopack
      -->
      <CollectedFiles Remove="packages.config" />
      
      <NormalizedFiles Include="@(CollectedFiles)" Condition="'%(CollectedFiles.Link)' == '' AND '%(CollectedFiles.Exclude)' != 'True' ">
        <!--
          The Identity metadata of the items are inconsistent, some of them are full paths and some of them are relative. To keep the file and directory
          structure during the copy we need the relative path, so we take the FullPath metadata and calculate the relative path manually.
          The [System.String]::Copy is a workaround, I couldn't make it work with simpler syntax. Found this solution here:
          https://stackoverflow.com/questions/5103026/in-msbuild-can-i-use-the-string-replace-function-on-a-metadata-item
        -->
        <DestinationPath>$(OctoPackPrecompileIntermediateOutputPath)$([System.String]::Copy('%(FullPath)').Substring($(ProjectDir.Length)))</DestinationPath>
      </NormalizedFiles>

      <NormalizedFiles Include="@(CollectedFiles)" Condition="'%(CollectedFiles.Link)' != ''">
        <!--
          In case of linked files the Identity metadata is where the file actually exists so we need to use the Link metadata as the destination url.
        -->
        <DestinationPath>$(OctoPackPrecompileIntermediateOutputPath)%(CollectedFiles.Link)</DestinationPath>
      </NormalizedFiles>
    </ItemGroup>

    <!-- It's important to clear the output folder, so the nuspec file can include the whole folder. -->
    <RemoveDir Directories="$(OctoPackPrecompileIntermediateOutputPath);$(OctoPackPrecompileOutputPath)" />

    <Copy SourceFiles="@(NormalizedFiles)"
          DestinationFiles="@(NormalizedFiles->'%(DestinationPath)')" />

    <AspNetCompiler PhysicalPath="$(ProjectDir)$(OctoPackPrecompileIntermediateOutputPath)"
                    TargetPath="$(ProjectDir)$(OctoPackPrecompileOutputPath)"
                    VirtualPath="/" />
  </Target>
</Project>
